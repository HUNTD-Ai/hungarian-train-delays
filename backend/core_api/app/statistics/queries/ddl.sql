-- main table that contains scraped delays
CREATE TABLE IF NOT EXISTS train_data (
	id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	"timestamp" BIGINT NOT NULL,
	elvira_id VARCHAR(200) NOT NULL,
	relation VARCHAR(400) NOT NULL,
	train_number VARCHAR(200) NOT NULL,
	lat FLOAT NOT NULL,
	lon FLOAT NOT NULL,
	line_kind VARCHAR(200) NOT NULL,
	line VARCHAR(200),
	delay FLOAT NOT NULL,
	delay_cause VARCHAR(400));

CREATE INDEX IF NOT EXISTS train_data_elvira_id_idx ON train_data(elvira_id);
CREATE INDEX IF NOT EXISTS train_data_relation_idx ON train_data(relation);
CREATE INDEX IF NOT EXISTS train_data_train_num_idx ON train_data(train_number);
CREATE INDEX IF NOT EXISTS train_data_ts_idx ON train_data("timestamp");

-- table that contains all stations
CREATE TABLE IF NOT EXISTS stations(id SERIAL PRIMARY KEY, name VARCHAR NOT NULL);

-- statistics tables
CREATE TABLE IF NOT EXISTS monthly_sum_delays(
  timestamp BIGINT PRIMARY KEY,
  delay FLOAT NOT NULL
);

CREATE TABLE IF NOT EXISTS monthly_mean_delays(
  timestamp BIGINT PRIMARY KEY,
  delay FLOAT NOT NULL
);

CREATE TABLE IF NOT EXISTS daily_record(
  timestamp BIGINT PRIMARY KEY,
  delay FLOAT NOT NULL
);

CREATE TABLE IF NOT EXISTS monthly_mean_route_delays(
  timestamp BIGINT,
  route TEXT,
  delay FLOAT NOT NULL,
  PRIMARY KEY(timestamp, route)
);

CREATE MATERIALIZED VIEW IF NOT EXISTS journey_delays AS
SELECT
  td.elvira_id,
  to_timestamp(MIN("timestamp")/1000) AS journey_start,
  COALESCE(AVG(NULLIF(delay, 'NaN')::float), 0) AS journey_avg_delay
FROM
  train_data td
WHERE
  "timestamp" > EXTRACT(EPOCH FROM (CURRENT_DATE - INTERVAL '1 month')::timestamp) * 1000
GROUP BY elvira_id;
